#!/usr/bin/env node

var path = require("path"),
    fs = require("fs"),
    optimist = require("optimist"),
    shapefile = require("shapefile"),
    queue = require("queue-async"),
    topojson = require("../");

var argv = optimist
    .usage("Usage: \033[1mtopojson\033[0m [options] [file â€¦]\n\n"

+ "Version: " + topojson.version + "\n\n"

+ "Converts the specified input shapefile, GeoJSON or TopoJSON objects to\n"
+ "TopoJSON, outputting a single TopoJSON topology object. The `objects`\n"
+ "property of the output topology is a map from input file name to geometry\n"
+ "object.")

    .options("o", {
      alias: "out",
      describe: "output TopoJSON file name",
      default: "/dev/stdout",
    })
    .options("q", {
      alias: "quantization",
      describe: "max. differentiable points in one dimension",
      default: 1e4,
    })
    .options("s", {
      alias: "simplify",
      describe: "precision threshold for Visvalingam simplification, in steradians",
      default: 0,
    })
    .options("simplify-proportion", {
      describe: "proportion of points to retain for Visvalingam simplification",
      default: 0,
    })
    .options("id-property", {
      describe: "name of feature property to promote to geometry id",
      default: null
    })
    .options("force-clockwise", {
      describe: "force exterior rings to be clockwise, and interior rings to be counterclockwise",
      type: "boolean",
      default: true
    })
    .options("p", {
      alias: "properties",
      describe: "feature properties to preserve; no name preserves all properties",
      default: false
    })
    .options("help", {
      describe: "display this helpful message",
      type: "boolean",
      default: false
    })
    .check(function(argv) {
      if (!argv._.length) throw new Error("input required");
      if (+argv.s && +argv["simplify-proportion"]) throw new Error("--simplify and --simplify-proportion are exclusive");
      if (typeof argv.p === "string") argv.p = argv.p.split(",");
    })
    .argv;

if (argv.help) return optimist.showHelp();

var objects = {},
    id = argv["id-property"];

// Create a property-to-identifier function.
id = id == null
    ? function(d) { return d.id; }
    : propertyId(typeof id === "string" ? id.split(",") : id);

// Create a map from basename to JSON object.
// Convert TopoJSON back to GeoJSON in preparation for merge, as needed.
var q = queue(1);
argv._.forEach(function(file) {
  q.defer(/\.shp$/.test(file) ? inputShapefile : inputJson, file);
});
q.await(output);

function inputShapefile(file, callback) {
  file = qualify(file);

  var object = objects[file.name] = {
    type: "FeatureCollection",
    features: []
  };

  shapefile.readStream(file.path)
      .on("error", callback)
      .on("feature", function(feature) { object.features.push(feature); })
      .on("end", callback);
}

function inputJson(file, callback) {
  file = qualify(file);

  var object = JSON.parse(fs.readFileSync(file.path));

  if (object.type === "Topology") {
    for (var key in object.objects) {
      objects[key] = topojson.object(object, object.objects[key]);
    }
  } else {
    objects[file.name] = object;
  }

  callback(null);
}

function output(error) {
  if (error) return console.trace(error);

  // Convert GeoJSON to TopoJSON.
  var object = topojson.topology(objects, {
    "verbose": true,
    "quantization": +argv.q,
    "id": id,
    "property-filter": argv.p === true ? function(d) { return d; }
        : argv.p === false ? function() { return null }
        : propertyFilter(argv.p)
  });

  // Simplify.
  if (+argv.s > 0 || +argv["simplify-proportion"] > 0) topojson.simplify(object, {
    "verbose": true,
    "minimum-area": +argv.s,
    "retain-proportion": +argv["simplify-proportion"]
  });

  // Remove empty (or tiny) features.
  // TODO For --simplify-propertion, figure out the appropriate minimum area.
  // TODO Combine simplify + filter as topojson.topology options?
  topojson.filter(object, {
    "minimum-area": +argv.s || 0,
    "force-clockwise": !!argv["force-clockwise"]
  });

  // Output JSON.
  var json = JSON.stringify(object);
  if (argv.o === "/dev/stdout") console.log(json);
  else fs.writeFileSync(argv.o, json, "utf8");
}

function qualify(file) {
  var i = file.indexOf("=");
  return {
    name: i >= 0 ? file.substring(0, i) : path.basename(file, path.extname(file)),
    path: i >= 0 ? file.substring(i + 1) : file
  };
}

function propertyId(properties) {
  return function(d) {
    if (d = d.properties) {
      var id;
      properties.some(function(p) {
        id = /^\+/.test(p) ? +d[p.substring(1)] : d[p];
        if (id == null) return;
        else if (typeof id === "number") isNaN(id) && (id = null);
        else if (typeof id !== "string") id = id + "";
        return id;
      });
      return id;
    }
  };
}

function propertyFilter(properties) {
  var o = {};
  properties.forEach(function(k) {
    var i = k.indexOf("="), v = k;
    if (i >= 0) v = k.slice(i + 1), k = k.slice(0, i);
    o[k] = v;
  });
  return function(d) {
    return o[d];
  };
}
